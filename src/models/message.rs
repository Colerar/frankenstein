/*
 * Telegram Bot API
 *
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Message : This object represents a message.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Message {
    /// Unique message identifier inside this chat
    #[serde(rename = "message_id")]
    pub message_id: i32,
    #[serde(rename = "from", skip_serializing_if = "Option::is_none")]
    pub from: Option<crate::models::User>,
    #[serde(rename = "sender_chat", skip_serializing_if = "Option::is_none")]
    pub sender_chat: Option<crate::models::Chat>,
    /// Date the message was sent in Unix time
    #[serde(rename = "date")]
    pub date: i32,
    #[serde(rename = "chat")]
    pub chat: crate::models::Chat,
    #[serde(rename = "forward_from", skip_serializing_if = "Option::is_none")]
    pub forward_from: Option<crate::models::User>,
    #[serde(rename = "forward_from_chat", skip_serializing_if = "Option::is_none")]
    pub forward_from_chat: Option<crate::models::Chat>,
    /// *Optional*. For messages forwarded from channels, identifier of the original message in the channel
    #[serde(rename = "forward_from_message_id", skip_serializing_if = "Option::is_none")]
    pub forward_from_message_id: Option<i32>,
    /// *Optional*. For messages forwarded from channels, signature of the post author if present
    #[serde(rename = "forward_signature", skip_serializing_if = "Option::is_none")]
    pub forward_signature: Option<String>,
    /// *Optional*. Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages
    #[serde(rename = "forward_sender_name", skip_serializing_if = "Option::is_none")]
    pub forward_sender_name: Option<String>,
    /// *Optional*. For forwarded messages, date the original message was sent in Unix time
    #[serde(rename = "forward_date", skip_serializing_if = "Option::is_none")]
    pub forward_date: Option<i32>,
    #[serde(rename = "reply_to_message", skip_serializing_if = "Option::is_none")]
    pub reply_to_message: Option<crate::models::Message>,
    #[serde(rename = "via_bot", skip_serializing_if = "Option::is_none")]
    pub via_bot: Option<crate::models::User>,
    /// *Optional*. Date the message was last edited in Unix time
    #[serde(rename = "edit_date", skip_serializing_if = "Option::is_none")]
    pub edit_date: Option<i32>,
    /// *Optional*. The unique identifier of a media message group this message belongs to
    #[serde(rename = "media_group_id", skip_serializing_if = "Option::is_none")]
    pub media_group_id: Option<String>,
    /// *Optional*. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator
    #[serde(rename = "author_signature", skip_serializing_if = "Option::is_none")]
    pub author_signature: Option<String>,
    /// *Optional*. For text messages, the actual UTF-8 text of the message, 0-4096 characters
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    /// *Optional*. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text
    #[serde(rename = "entities", skip_serializing_if = "Option::is_none")]
    pub entities: Option<Vec<crate::models::MessageEntity>>,
    #[serde(rename = "animation", skip_serializing_if = "Option::is_none")]
    pub animation: Option<crate::models::Animation>,
    #[serde(rename = "audio", skip_serializing_if = "Option::is_none")]
    pub audio: Option<crate::models::Audio>,
    #[serde(rename = "document", skip_serializing_if = "Option::is_none")]
    pub document: Option<crate::models::Document>,
    /// *Optional*. Message is a photo, available sizes of the photo
    #[serde(rename = "photo", skip_serializing_if = "Option::is_none")]
    pub photo: Option<Vec<crate::models::PhotoSize>>,
    #[serde(rename = "sticker", skip_serializing_if = "Option::is_none")]
    pub sticker: Option<crate::models::Sticker>,
    #[serde(rename = "video", skip_serializing_if = "Option::is_none")]
    pub video: Option<crate::models::Video>,
    #[serde(rename = "video_note", skip_serializing_if = "Option::is_none")]
    pub video_note: Option<crate::models::VideoNote>,
    #[serde(rename = "voice", skip_serializing_if = "Option::is_none")]
    pub voice: Option<crate::models::Voice>,
    /// *Optional*. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters
    #[serde(rename = "caption", skip_serializing_if = "Option::is_none")]
    pub caption: Option<String>,
    /// *Optional*. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption
    #[serde(rename = "caption_entities", skip_serializing_if = "Option::is_none")]
    pub caption_entities: Option<Vec<crate::models::MessageEntity>>,
    #[serde(rename = "contact", skip_serializing_if = "Option::is_none")]
    pub contact: Option<crate::models::Contact>,
    #[serde(rename = "dice", skip_serializing_if = "Option::is_none")]
    pub dice: Option<crate::models::Dice>,
    #[serde(rename = "game", skip_serializing_if = "Option::is_none")]
    pub game: Option<crate::models::Game>,
    #[serde(rename = "poll", skip_serializing_if = "Option::is_none")]
    pub poll: Option<crate::models::Poll>,
    #[serde(rename = "venue", skip_serializing_if = "Option::is_none")]
    pub venue: Option<crate::models::Venue>,
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<crate::models::Location>,
    /// *Optional*. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)
    #[serde(rename = "new_chat_members", skip_serializing_if = "Option::is_none")]
    pub new_chat_members: Option<Vec<crate::models::User>>,
    #[serde(rename = "left_chat_member", skip_serializing_if = "Option::is_none")]
    pub left_chat_member: Option<crate::models::User>,
    /// *Optional*. A chat title was changed to this value
    #[serde(rename = "new_chat_title", skip_serializing_if = "Option::is_none")]
    pub new_chat_title: Option<String>,
    /// *Optional*. A chat photo was change to this value
    #[serde(rename = "new_chat_photo", skip_serializing_if = "Option::is_none")]
    pub new_chat_photo: Option<Vec<crate::models::PhotoSize>>,
    /// *Optional*. Service message: the chat photo was deleted
    #[serde(rename = "delete_chat_photo", skip_serializing_if = "Option::is_none")]
    pub delete_chat_photo: Option<bool>,
    /// *Optional*. Service message: the group has been created
    #[serde(rename = "group_chat_created", skip_serializing_if = "Option::is_none")]
    pub group_chat_created: Option<bool>,
    /// *Optional*. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply\\_to\\_message if someone replies to a very first message in a directly created supergroup.
    #[serde(rename = "supergroup_chat_created", skip_serializing_if = "Option::is_none")]
    pub supergroup_chat_created: Option<bool>,
    /// *Optional*. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply\\_to\\_message if someone replies to a very first message in a channel.
    #[serde(rename = "channel_chat_created", skip_serializing_if = "Option::is_none")]
    pub channel_chat_created: Option<bool>,
    #[serde(rename = "message_auto_delete_timer_changed", skip_serializing_if = "Option::is_none")]
    pub message_auto_delete_timer_changed: Option<crate::models::MessageAutoDeleteTimerChanged>,
    /// *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
    #[serde(rename = "migrate_to_chat_id", skip_serializing_if = "Option::is_none")]
    pub migrate_to_chat_id: Option<i32>,
    /// *Optional*. The supergroup has been migrated from a group with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
    #[serde(rename = "migrate_from_chat_id", skip_serializing_if = "Option::is_none")]
    pub migrate_from_chat_id: Option<i32>,
    #[serde(rename = "pinned_message", skip_serializing_if = "Option::is_none")]
    pub pinned_message: Option<crate::models::Message>,
    #[serde(rename = "invoice", skip_serializing_if = "Option::is_none")]
    pub invoice: Option<crate::models::Invoice>,
    #[serde(rename = "successful_payment", skip_serializing_if = "Option::is_none")]
    pub successful_payment: Option<crate::models::SuccessfulPayment>,
    /// *Optional*. The domain name of the website on which the user has logged in. [More about Telegram Login Â»](/widgets/login)
    #[serde(rename = "connected_website", skip_serializing_if = "Option::is_none")]
    pub connected_website: Option<String>,
    #[serde(rename = "passport_data", skip_serializing_if = "Option::is_none")]
    pub passport_data: Option<crate::models::PassportData>,
    #[serde(rename = "proximity_alert_triggered", skip_serializing_if = "Option::is_none")]
    pub proximity_alert_triggered: Option<crate::models::ProximityAlertTriggered>,
    /// This object represents a service message about a voice chat started in the chat. Currently holds no information.
    #[serde(rename = "voice_chat_started", skip_serializing_if = "Option::is_none")]
    pub voice_chat_started: Option<serde_json::Value>,
    #[serde(rename = "voice_chat_ended", skip_serializing_if = "Option::is_none")]
    pub voice_chat_ended: Option<crate::models::VoiceChatEnded>,
    #[serde(rename = "voice_chat_participants_invited", skip_serializing_if = "Option::is_none")]
    pub voice_chat_participants_invited: Option<crate::models::VoiceChatParticipantsInvited>,
    #[serde(rename = "reply_markup", skip_serializing_if = "Option::is_none")]
    pub reply_markup: Option<crate::models::InlineKeyboardMarkup>,
}

impl Message {
    /// This object represents a message.
    pub fn new(message_id: i32, date: i32, chat: crate::models::Chat) -> Message {
        Message {
            message_id,
            from: None,
            sender_chat: None,
            date,
            chat,
            forward_from: None,
            forward_from_chat: None,
            forward_from_message_id: None,
            forward_signature: None,
            forward_sender_name: None,
            forward_date: None,
            reply_to_message: None,
            via_bot: None,
            edit_date: None,
            media_group_id: None,
            author_signature: None,
            text: None,
            entities: None,
            animation: None,
            audio: None,
            document: None,
            photo: None,
            sticker: None,
            video: None,
            video_note: None,
            voice: None,
            caption: None,
            caption_entities: None,
            contact: None,
            dice: None,
            game: None,
            poll: None,
            venue: None,
            location: None,
            new_chat_members: None,
            left_chat_member: None,
            new_chat_title: None,
            new_chat_photo: None,
            delete_chat_photo: None,
            group_chat_created: None,
            supergroup_chat_created: None,
            channel_chat_created: None,
            message_auto_delete_timer_changed: None,
            migrate_to_chat_id: None,
            migrate_from_chat_id: None,
            pinned_message: None,
            invoice: None,
            successful_payment: None,
            connected_website: None,
            passport_data: None,
            proximity_alert_triggered: None,
            voice_chat_started: None,
            voice_chat_ended: None,
            voice_chat_participants_invited: None,
            reply_markup: None,
        }
    }
}


