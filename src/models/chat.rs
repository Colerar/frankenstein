/*
 * Telegram Bot API
 *
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Chat : This object represents a chat.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Chat {
    /// Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
    #[serde(rename = "id")]
    pub id: i32,
    /// Type of chat, can be either “private”, “group”, “supergroup” or “channel”
    #[serde(rename = "type")]
    pub _type: Type,
    /// *Optional*. Title, for supergroups, channels and group chats
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// *Optional*. Username, for private chats, supergroups and channels if available
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    /// *Optional*. First name of the other party in a private chat
    #[serde(rename = "first_name", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    /// *Optional*. Last name of the other party in a private chat
    #[serde(rename = "last_name", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    #[serde(rename = "photo", skip_serializing_if = "Option::is_none")]
    pub photo: Option<crate::models::ChatPhoto>,
    /// *Optional*. Bio of the other party in a private chat. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
    #[serde(rename = "bio", skip_serializing_if = "Option::is_none")]
    pub bio: Option<String>,
    /// *Optional*. Description, for groups, supergroups and channel chats. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// *Optional*. Primary invite link, for groups, supergroups and channel chats. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
    #[serde(rename = "invite_link", skip_serializing_if = "Option::is_none")]
    pub invite_link: Option<String>,
    #[serde(rename = "pinned_message", skip_serializing_if = "Option::is_none")]
    pub pinned_message: Option<crate::models::Message>,
    #[serde(rename = "permissions", skip_serializing_if = "Option::is_none")]
    pub permissions: Option<crate::models::ChatPermissions>,
    /// *Optional*. For supergroups, the minimum allowed delay between consecutive messages sent by each unpriviledged user. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
    #[serde(rename = "slow_mode_delay", skip_serializing_if = "Option::is_none")]
    pub slow_mode_delay: Option<i32>,
    /// *Optional*. The time after which all messages sent to the chat will be automatically deleted; in seconds. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
    #[serde(rename = "message_auto_delete_time", skip_serializing_if = "Option::is_none")]
    pub message_auto_delete_time: Option<i32>,
    /// *Optional*. For supergroups, name of group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
    #[serde(rename = "sticker_set_name", skip_serializing_if = "Option::is_none")]
    pub sticker_set_name: Option<String>,
    /// *Optional*. True, if the bot can change the group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
    #[serde(rename = "can_set_sticker_set", skip_serializing_if = "Option::is_none")]
    pub can_set_sticker_set: Option<bool>,
    /// *Optional*. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
    #[serde(rename = "linked_chat_id", skip_serializing_if = "Option::is_none")]
    pub linked_chat_id: Option<i32>,
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<crate::models::ChatLocation>,
}

impl Chat {
    /// This object represents a chat.
    pub fn new(id: i32, _type: Type) -> Chat {
        Chat {
            id,
            _type,
            title: None,
            username: None,
            first_name: None,
            last_name: None,
            photo: None,
            bio: None,
            description: None,
            invite_link: None,
            pinned_message: None,
            permissions: None,
            slow_mode_delay: None,
            message_auto_delete_time: None,
            sticker_set_name: None,
            can_set_sticker_set: None,
            linked_chat_id: None,
            location: None,
        }
    }
}

/// Type of chat, can be either “private”, “group”, “supergroup” or “channel”
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "private")]
    Private,
    #[serde(rename = "group")]
    Group,
    #[serde(rename = "supergroup")]
    Supergroup,
    #[serde(rename = "channel")]
    Channel,
}

