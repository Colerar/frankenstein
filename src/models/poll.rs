/*
 * Telegram Bot API
 *
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Poll : This object contains information about a poll.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Poll {
    /// Unique poll identifier
    #[serde(rename = "id")]
    pub id: String,
    /// Poll question, 1-300 characters
    #[serde(rename = "question")]
    pub question: String,
    /// List of poll options
    #[serde(rename = "options")]
    pub options: Vec<crate::models::PollOption>,
    /// Total number of users that voted in the poll
    #[serde(rename = "total_voter_count")]
    pub total_voter_count: i32,
    /// True, if the poll is closed
    #[serde(rename = "is_closed")]
    pub is_closed: bool,
    /// True, if the poll is anonymous
    #[serde(rename = "is_anonymous")]
    pub is_anonymous: bool,
    /// Poll type, currently can be “regular” or “quiz”
    #[serde(rename = "type")]
    pub _type: String,
    /// True, if the poll allows multiple answers
    #[serde(rename = "allows_multiple_answers")]
    pub allows_multiple_answers: bool,
    /// *Optional*. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.
    #[serde(rename = "correct_option_id", skip_serializing_if = "Option::is_none")]
    pub correct_option_id: Option<i32>,
    /// *Optional*. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters
    #[serde(rename = "explanation", skip_serializing_if = "Option::is_none")]
    pub explanation: Option<String>,
    /// *Optional*. Special entities like usernames, URLs, bot commands, etc. that appear in the *explanation*
    #[serde(rename = "explanation_entities", skip_serializing_if = "Option::is_none")]
    pub explanation_entities: Option<Vec<crate::models::MessageEntity>>,
    /// *Optional*. Amount of time in seconds the poll will be active after creation
    #[serde(rename = "open_period", skip_serializing_if = "Option::is_none")]
    pub open_period: Option<i32>,
    /// *Optional*. Point in time (Unix timestamp) when the poll will be automatically closed
    #[serde(rename = "close_date", skip_serializing_if = "Option::is_none")]
    pub close_date: Option<i32>,
}

impl Poll {
    /// This object contains information about a poll.
    pub fn new(id: String, question: String, options: Vec<crate::models::PollOption>, total_voter_count: i32, is_closed: bool, is_anonymous: bool, _type: String, allows_multiple_answers: bool) -> Poll {
        Poll {
            id,
            question,
            options,
            total_voter_count,
            is_closed,
            is_anonymous,
            _type,
            allows_multiple_answers,
            correct_option_id: None,
            explanation: None,
            explanation_entities: None,
            open_period: None,
            close_date: None,
        }
    }
}


