/*
 * Telegram Bot API
 *
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ChatMember : This object contains information about one member of a chat.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChatMember {
    #[serde(rename = "user")]
    pub user: crate::models::User,
    /// The member's status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”
    #[serde(rename = "status")]
    pub status: Status,
    /// *Optional*. Owner and administrators only. Custom title for this user
    #[serde(rename = "custom_title", skip_serializing_if = "Option::is_none")]
    pub custom_title: Option<String>,
    /// *Optional*. Owner and administrators only. True, if the user's presence in the chat is hidden
    #[serde(rename = "is_anonymous", skip_serializing_if = "Option::is_none")]
    pub is_anonymous: Option<bool>,
    /// *Optional*. Administrators only. True, if the bot is allowed to edit administrator privileges of that user
    #[serde(rename = "can_be_edited", skip_serializing_if = "Option::is_none")]
    pub can_be_edited: Option<bool>,
    /// *Optional*. Administrators only. True, if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege
    #[serde(rename = "can_manage_chat", skip_serializing_if = "Option::is_none")]
    pub can_manage_chat: Option<bool>,
    /// *Optional*. Administrators only. True, if the administrator can post in the channel; channels only
    #[serde(rename = "can_post_messages", skip_serializing_if = "Option::is_none")]
    pub can_post_messages: Option<bool>,
    /// *Optional*. Administrators only. True, if the administrator can edit messages of other users and can pin messages; channels only
    #[serde(rename = "can_edit_messages", skip_serializing_if = "Option::is_none")]
    pub can_edit_messages: Option<bool>,
    /// *Optional*. Administrators only. True, if the administrator can delete messages of other users
    #[serde(rename = "can_delete_messages", skip_serializing_if = "Option::is_none")]
    pub can_delete_messages: Option<bool>,
    /// *Optional*. Administrators only. True, if the administrator can manage voice chats
    #[serde(rename = "can_manage_voice_chats", skip_serializing_if = "Option::is_none")]
    pub can_manage_voice_chats: Option<bool>,
    /// *Optional*. Administrators only. True, if the administrator can restrict, ban or unban chat members
    #[serde(rename = "can_restrict_members", skip_serializing_if = "Option::is_none")]
    pub can_restrict_members: Option<bool>,
    /// *Optional*. Administrators only. True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)
    #[serde(rename = "can_promote_members", skip_serializing_if = "Option::is_none")]
    pub can_promote_members: Option<bool>,
    /// *Optional*. Administrators and restricted only. True, if the user is allowed to change the chat title, photo and other settings
    #[serde(rename = "can_change_info", skip_serializing_if = "Option::is_none")]
    pub can_change_info: Option<bool>,
    /// *Optional*. Administrators and restricted only. True, if the user is allowed to invite new users to the chat
    #[serde(rename = "can_invite_users", skip_serializing_if = "Option::is_none")]
    pub can_invite_users: Option<bool>,
    /// *Optional*. Administrators and restricted only. True, if the user is allowed to pin messages; groups and supergroups only
    #[serde(rename = "can_pin_messages", skip_serializing_if = "Option::is_none")]
    pub can_pin_messages: Option<bool>,
    /// *Optional*. Restricted only. True, if the user is a member of the chat at the moment of the request
    #[serde(rename = "is_member", skip_serializing_if = "Option::is_none")]
    pub is_member: Option<bool>,
    /// *Optional*. Restricted only. True, if the user is allowed to send text messages, contacts, locations and venues
    #[serde(rename = "can_send_messages", skip_serializing_if = "Option::is_none")]
    pub can_send_messages: Option<bool>,
    /// *Optional*. Restricted only. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes
    #[serde(rename = "can_send_media_messages", skip_serializing_if = "Option::is_none")]
    pub can_send_media_messages: Option<bool>,
    /// *Optional*. Restricted only. True, if the user is allowed to send polls
    #[serde(rename = "can_send_polls", skip_serializing_if = "Option::is_none")]
    pub can_send_polls: Option<bool>,
    /// *Optional*. Restricted only. True, if the user is allowed to send animations, games, stickers and use inline bots
    #[serde(rename = "can_send_other_messages", skip_serializing_if = "Option::is_none")]
    pub can_send_other_messages: Option<bool>,
    /// *Optional*. Restricted only. True, if the user is allowed to add web page previews to their messages
    #[serde(rename = "can_add_web_page_previews", skip_serializing_if = "Option::is_none")]
    pub can_add_web_page_previews: Option<bool>,
    /// *Optional*. Restricted and kicked only. Date when restrictions will be lifted for this user; unix time
    #[serde(rename = "until_date", skip_serializing_if = "Option::is_none")]
    pub until_date: Option<i32>,
}

impl ChatMember {
    /// This object contains information about one member of a chat.
    pub fn new(user: crate::models::User, status: Status) -> ChatMember {
        ChatMember {
            user,
            status,
            custom_title: None,
            is_anonymous: None,
            can_be_edited: None,
            can_manage_chat: None,
            can_post_messages: None,
            can_edit_messages: None,
            can_delete_messages: None,
            can_manage_voice_chats: None,
            can_restrict_members: None,
            can_promote_members: None,
            can_change_info: None,
            can_invite_users: None,
            can_pin_messages: None,
            is_member: None,
            can_send_messages: None,
            can_send_media_messages: None,
            can_send_polls: None,
            can_send_other_messages: None,
            can_add_web_page_previews: None,
            until_date: None,
        }
    }
}

/// The member's status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "creator")]
    Creator,
    #[serde(rename = "administrator")]
    Administrator,
    #[serde(rename = "member")]
    Member,
    #[serde(rename = "restricted")]
    Restricted,
    #[serde(rename = "left")]
    Left,
    #[serde(rename = "kicked")]
    Kicked,
}

