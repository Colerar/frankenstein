/*
 * Telegram Bot API
 *
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// MessageEntity : This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MessageEntity {
    /// Type of the entity. Can be “mention” (`@username`), “hashtag” (`#hashtag`), “cashtag” (`$USD`), “bot\\_command” (`/start@jobs_bot`), “url” (`https://telegram.org`), “email” (`do-not-reply@telegram.org`), “phone\\_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic text*), “underline” (underlined text), “strikethrough” (strikethrough text), “code” (monowidth string), “pre” (monowidth block), “text\\_link” (for clickable text URLs), “text\\_mention” (for users [without usernames](https://telegram.org/blog/edit#new-mentions))
    #[serde(rename = "type")]
    pub _type: Type,
    /// Offset in UTF-16 code units to the start of the entity
    #[serde(rename = "offset")]
    pub offset: i32,
    /// Length of the entity in UTF-16 code units
    #[serde(rename = "length")]
    pub length: i32,
    /// *Optional*. For “text\\_link” only, url that will be opened after user taps on the text
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<crate::models::User>,
    /// *Optional*. For “pre” only, the programming language of the entity text
    #[serde(rename = "language", skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,
}

impl MessageEntity {
    /// This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.
    pub fn new(_type: Type, offset: i32, length: i32) -> MessageEntity {
        MessageEntity {
            _type,
            offset,
            length,
            url: None,
            user: None,
            language: None,
        }
    }
}

/// Type of the entity. Can be “mention” (`@username`), “hashtag” (`#hashtag`), “cashtag” (`$USD`), “bot\\_command” (`/start@jobs_bot`), “url” (`https://telegram.org`), “email” (`do-not-reply@telegram.org`), “phone\\_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic text*), “underline” (underlined text), “strikethrough” (strikethrough text), “code” (monowidth string), “pre” (monowidth block), “text\\_link” (for clickable text URLs), “text\\_mention” (for users [without usernames](https://telegram.org/blog/edit#new-mentions))
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "mention")]
    Mention,
    #[serde(rename = "hashtag")]
    Hashtag,
    #[serde(rename = "cashtag")]
    Cashtag,
    #[serde(rename = "bot_command")]
    BotCommand,
    #[serde(rename = "url")]
    Url,
    #[serde(rename = "email")]
    Email,
    #[serde(rename = "phone_number")]
    PhoneNumber,
    #[serde(rename = "bold")]
    Bold,
    #[serde(rename = "italic")]
    Italic,
    #[serde(rename = "underline")]
    Underline,
    #[serde(rename = "strikethrough")]
    Strikethrough,
    #[serde(rename = "code")]
    Code,
    #[serde(rename = "pre")]
    Pre,
    #[serde(rename = "text_link")]
    TextLink,
    #[serde(rename = "text_mention")]
    TextMention,
}

