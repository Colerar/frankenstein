/*
 * Telegram Bot API
 *
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InlineObject19 {
    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
    #[serde(rename = "chat_id")]
    pub chat_id: crate::models::AnyOfintegerstring,
    /// Poll question, 1-300 characters
    #[serde(rename = "question")]
    pub question: String,
    /// A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
    #[serde(rename = "options")]
    pub options: Vec<String>,
    /// True, if the poll needs to be anonymous, defaults to *True*
    #[serde(rename = "is_anonymous", skip_serializing_if = "Option::is_none")]
    pub is_anonymous: Option<bool>,
    /// Poll type, “quiz” or “regular”, defaults to “regular”
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    /// True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
    #[serde(rename = "allows_multiple_answers", skip_serializing_if = "Option::is_none")]
    pub allows_multiple_answers: Option<bool>,
    /// 0-based identifier of the correct answer option, required for polls in quiz mode
    #[serde(rename = "correct_option_id", skip_serializing_if = "Option::is_none")]
    pub correct_option_id: Option<i32>,
    /// Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
    #[serde(rename = "explanation", skip_serializing_if = "Option::is_none")]
    pub explanation: Option<String>,
    /// Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
    #[serde(rename = "explanation_parse_mode", skip_serializing_if = "Option::is_none")]
    pub explanation_parse_mode: Option<String>,
    /// List of special entities that appear in the poll explanation, which can be specified instead of *parse\\_mode*
    #[serde(rename = "explanation_entities", skip_serializing_if = "Option::is_none")]
    pub explanation_entities: Option<Vec<crate::models::MessageEntity>>,
    /// Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\\_date*.
    #[serde(rename = "open_period", skip_serializing_if = "Option::is_none")]
    pub open_period: Option<i32>,
    /// Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\\_period*.
    #[serde(rename = "close_date", skip_serializing_if = "Option::is_none")]
    pub close_date: Option<i32>,
    /// Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.
    #[serde(rename = "is_closed", skip_serializing_if = "Option::is_none")]
    pub is_closed: Option<bool>,
    /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
    #[serde(rename = "disable_notification", skip_serializing_if = "Option::is_none")]
    pub disable_notification: Option<bool>,
    /// If the message is a reply, ID of the original message
    #[serde(rename = "reply_to_message_id", skip_serializing_if = "Option::is_none")]
    pub reply_to_message_id: Option<i32>,
    /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
    #[serde(rename = "allow_sending_without_reply", skip_serializing_if = "Option::is_none")]
    pub allow_sending_without_reply: Option<bool>,
    /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
    #[serde(rename = "reply_markup", skip_serializing_if = "Option::is_none")]
    pub reply_markup: Option<crate::models::AnyOfInlineKeyboardMarkupReplyKeyboardMarkupReplyKeyboardRemoveForceReply>,
}

impl InlineObject19 {
    pub fn new(chat_id: crate::models::AnyOfintegerstring, question: String, options: Vec<String>) -> InlineObject19 {
        InlineObject19 {
            chat_id,
            question,
            options,
            is_anonymous: None,
            _type: None,
            allows_multiple_answers: None,
            correct_option_id: None,
            explanation: None,
            explanation_parse_mode: None,
            explanation_entities: None,
            open_period: None,
            close_date: None,
            is_closed: None,
            disable_notification: None,
            reply_to_message_id: None,
            allow_sending_without_reply: None,
            reply_markup: None,
        }
    }
}


