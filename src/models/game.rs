/*
 * Telegram Bot API
 *
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Game : This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Game {
    /// Title of the game
    #[serde(rename = "title")]
    pub title: String,
    /// Description of the game
    #[serde(rename = "description")]
    pub description: String,
    /// Photo that will be displayed in the game message in chats.
    #[serde(rename = "photo")]
    pub photo: Vec<crate::models::PhotoSize>,
    /// *Optional*. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls [setGameScore](https://core.telegram.org/bots/api/#setgamescore), or manually edited using [editMessageText](https://core.telegram.org/bots/api/#editmessagetext). 0-4096 characters.
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    /// *Optional*. Special entities that appear in *text*, such as usernames, URLs, bot commands, etc.
    #[serde(rename = "text_entities", skip_serializing_if = "Option::is_none")]
    pub text_entities: Option<Vec<crate::models::MessageEntity>>,
    #[serde(rename = "animation", skip_serializing_if = "Option::is_none")]
    pub animation: Option<crate::models::Animation>,
}

impl Game {
    /// This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.
    pub fn new(title: String, description: String, photo: Vec<crate::models::PhotoSize>) -> Game {
        Game {
            title,
            description,
            photo,
            text: None,
            text_entities: None,
            animation: None,
        }
    }
}


