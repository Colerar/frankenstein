/*
 * Telegram Bot API
 *
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InlineObject27 {
    /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
    #[serde(rename = "chat_id")]
    pub chat_id: crate::models::AnyOfintegerstring,
    /// Unique identifier of the target user
    #[serde(rename = "user_id")]
    pub user_id: i32,
    /// Pass *True*, if the administrator's presence in the chat is hidden
    #[serde(rename = "is_anonymous", skip_serializing_if = "Option::is_none")]
    pub is_anonymous: Option<bool>,
    /// Pass True, if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege
    #[serde(rename = "can_manage_chat", skip_serializing_if = "Option::is_none")]
    pub can_manage_chat: Option<bool>,
    /// Pass True, if the administrator can create channel posts, channels only
    #[serde(rename = "can_post_messages", skip_serializing_if = "Option::is_none")]
    pub can_post_messages: Option<bool>,
    /// Pass True, if the administrator can edit messages of other users and can pin messages, channels only
    #[serde(rename = "can_edit_messages", skip_serializing_if = "Option::is_none")]
    pub can_edit_messages: Option<bool>,
    /// Pass True, if the administrator can delete messages of other users
    #[serde(rename = "can_delete_messages", skip_serializing_if = "Option::is_none")]
    pub can_delete_messages: Option<bool>,
    /// Pass True, if the administrator can manage voice chats, supergroups only
    #[serde(rename = "can_manage_voice_chats", skip_serializing_if = "Option::is_none")]
    pub can_manage_voice_chats: Option<bool>,
    /// Pass True, if the administrator can restrict, ban or unban chat members
    #[serde(rename = "can_restrict_members", skip_serializing_if = "Option::is_none")]
    pub can_restrict_members: Option<bool>,
    /// Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)
    #[serde(rename = "can_promote_members", skip_serializing_if = "Option::is_none")]
    pub can_promote_members: Option<bool>,
    /// Pass True, if the administrator can change chat title, photo and other settings
    #[serde(rename = "can_change_info", skip_serializing_if = "Option::is_none")]
    pub can_change_info: Option<bool>,
    /// Pass True, if the administrator can invite new users to the chat
    #[serde(rename = "can_invite_users", skip_serializing_if = "Option::is_none")]
    pub can_invite_users: Option<bool>,
    /// Pass True, if the administrator can pin messages, supergroups only
    #[serde(rename = "can_pin_messages", skip_serializing_if = "Option::is_none")]
    pub can_pin_messages: Option<bool>,
}

impl InlineObject27 {
    pub fn new(chat_id: crate::models::AnyOfintegerstring, user_id: i32) -> InlineObject27 {
        InlineObject27 {
            chat_id,
            user_id,
            is_anonymous: None,
            can_manage_chat: None,
            can_post_messages: None,
            can_edit_messages: None,
            can_delete_messages: None,
            can_manage_voice_chats: None,
            can_restrict_members: None,
            can_promote_members: None,
            can_change_info: None,
            can_invite_users: None,
            can_pin_messages: None,
        }
    }
}


