/*
 * Telegram Bot API
 *
 * Auto-generated OpenAPI schema
 *
 * The version of the OpenAPI document: 5.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method `add_sticker_to_set_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddStickerToSetPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `answer_callback_query_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AnswerCallbackQueryPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `answer_inline_query_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AnswerInlineQueryPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `answer_pre_checkout_query_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AnswerPreCheckoutQueryPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `answer_shipping_query_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AnswerShippingQueryPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `close_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ClosePostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `copy_message_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CopyMessagePostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `create_chat_invite_link_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateChatInviteLinkPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `create_new_sticker_set_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateNewStickerSetPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_chat_photo_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteChatPhotoPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_chat_sticker_set_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteChatStickerSetPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_message_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteMessagePostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_sticker_from_set_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteStickerFromSetPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_webhook_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteWebhookPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `edit_chat_invite_link_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EditChatInviteLinkPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `edit_message_caption_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EditMessageCaptionPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `edit_message_live_location_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EditMessageLiveLocationPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `edit_message_media_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EditMessageMediaPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `edit_message_reply_markup_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EditMessageReplyMarkupPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `edit_message_text_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EditMessageTextPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `export_chat_invite_link_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExportChatInviteLinkPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `forward_message_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ForwardMessagePostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_chat_administrators_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetChatAdministratorsPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_chat_member_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetChatMemberPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_chat_members_count_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetChatMembersCountPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_chat_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetChatPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_file_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFilePostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_game_high_scores_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetGameHighScoresPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_me_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMePostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_my_commands_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMyCommandsPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_sticker_set_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetStickerSetPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_updates_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetUpdatesPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_user_profile_photos_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetUserProfilePhotosPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_webhook_info_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetWebhookInfoPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `kick_chat_member_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum KickChatMemberPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `leave_chat_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum LeaveChatPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `log_out_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum LogOutPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `pin_chat_message_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PinChatMessagePostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `promote_chat_member_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PromoteChatMemberPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `restrict_chat_member_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RestrictChatMemberPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `revoke_chat_invite_link_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RevokeChatInviteLinkPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `send_animation_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SendAnimationPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `send_audio_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SendAudioPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `send_chat_action_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SendChatActionPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `send_contact_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SendContactPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `send_dice_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SendDicePostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `send_document_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SendDocumentPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `send_game_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SendGamePostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `send_invoice_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SendInvoicePostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `send_location_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SendLocationPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `send_media_group_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SendMediaGroupPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `send_message_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SendMessagePostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `send_photo_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SendPhotoPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `send_poll_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SendPollPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `send_sticker_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SendStickerPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `send_venue_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SendVenuePostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `send_video_note_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SendVideoNotePostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `send_video_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SendVideoPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `send_voice_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SendVoicePostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_chat_administrator_custom_title_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetChatAdministratorCustomTitlePostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_chat_description_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetChatDescriptionPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_chat_permissions_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetChatPermissionsPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_chat_photo_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetChatPhotoPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_chat_sticker_set_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetChatStickerSetPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_chat_title_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetChatTitlePostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_game_score_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetGameScorePostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_my_commands_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetMyCommandsPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_passport_data_errors_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetPassportDataErrorsPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_sticker_position_in_set_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetStickerPositionInSetPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_sticker_set_thumb_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetStickerSetThumbPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_webhook_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetWebhookPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `stop_message_live_location_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StopMessageLiveLocationPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `stop_poll_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StopPollPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `unban_chat_member_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UnbanChatMemberPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `unpin_all_chat_messages_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UnpinAllChatMessagesPostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `unpin_chat_message_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UnpinChatMessagePostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `upload_sticker_file_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UploadStickerFilePostError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}


/// Use this method to add a new sticker to a set created by the bot. You **must** use exactly one of the fields *png\\_sticker* or *tgs\\_sticker*. Animated stickers can be added to animated sticker sets and only to them. Animated sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns *True* on success.
pub async fn add_sticker_to_set_post(configuration: &configuration::Configuration, user_id: i32, name: &str, emojis: &str, png_sticker: Option<crate::models::crate::models::AnyOfAnyTypestring>, tgs_sticker: Option<crate::models::serde_json::Value>, mask_position: Option<crate::models::crate::models::MaskPosition>) -> Result<crate::models::InlineResponse2001, Error<AddStickerToSetPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/addStickerToSet", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form = reqwest::multipart::Form::new();
    local_var_form = local_var_form.text("user_id", user_id.to_string());
    local_var_form = local_var_form.text("name", name.to_string());
    if let Some(local_var_param_value) = png_sticker {
        local_var_form = local_var_form.text("png_sticker", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = tgs_sticker {
        local_var_form = local_var_form.text("tgs_sticker", local_var_param_value.to_string());
    }
    local_var_form = local_var_form.text("emojis", emojis.to_string());
    if let Some(local_var_param_value) = mask_position {
        local_var_form = local_var_form.text("mask_position", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AddStickerToSetPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to send answers to callback queries sent from [inline keyboards](/bots#inline-keyboards-and-on-the-fly-updating). The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, *True* is returned.  Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via [@Botfather](https://t.me/botfather) and accept the terms. Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
pub async fn answer_callback_query_post(configuration: &configuration::Configuration, callback_query_id: &str, text: Option<&str>, show_alert: Option<bool>, url: Option<&str>, cache_time: Option<i32>) -> Result<crate::models::InlineResponse2001, Error<AnswerCallbackQueryPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/answerCallbackQuery", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("callback_query_id", callback_query_id.to_string());
    if let Some(local_var_param_value) = text {
        local_var_form_params.insert("text", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = show_alert {
        local_var_form_params.insert("show_alert", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = url {
        local_var_form_params.insert("url", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = cache_time {
        local_var_form_params.insert("cache_time", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AnswerCallbackQueryPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to send answers to an inline query. On success, *True* is returned.   No more than **50** results per query are allowed.
pub async fn answer_inline_query_post(configuration: &configuration::Configuration, inline_query_id: &str, results: Vec<crate::models::InlineQueryResult>, cache_time: Option<i32>, is_personal: Option<bool>, next_offset: Option<&str>, switch_pm_text: Option<&str>, switch_pm_parameter: Option<&str>) -> Result<crate::models::InlineResponse2001, Error<AnswerInlineQueryPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/answerInlineQuery", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("inline_query_id", inline_query_id.to_string());
    local_var_form_params.insert("results", results.join(",").to_string());
    if let Some(local_var_param_value) = cache_time {
        local_var_form_params.insert("cache_time", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = is_personal {
        local_var_form_params.insert("is_personal", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = next_offset {
        local_var_form_params.insert("next_offset", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = switch_pm_text {
        local_var_form_params.insert("switch_pm_text", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = switch_pm_parameter {
        local_var_form_params.insert("switch_pm_parameter", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AnswerInlineQueryPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an [Update](https://core.telegram.org/bots/api/#update) with the field *pre\\_checkout\\_query*. Use this method to respond to such pre-checkout queries. On success, True is returned. **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
pub async fn answer_pre_checkout_query_post(configuration: &configuration::Configuration, pre_checkout_query_id: &str, ok: bool, error_message: Option<&str>) -> Result<crate::models::InlineResponse2001, Error<AnswerPreCheckoutQueryPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/answerPreCheckoutQuery", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("pre_checkout_query_id", pre_checkout_query_id.to_string());
    local_var_form_params.insert("ok", ok.to_string());
    if let Some(local_var_param_value) = error_message {
        local_var_form_params.insert("error_message", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AnswerPreCheckoutQueryPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// If you sent an invoice requesting a shipping address and the parameter *is\\_flexible* was specified, the Bot API will send an [Update](https://core.telegram.org/bots/api/#update) with a *shipping\\_query* field to the bot. Use this method to reply to shipping queries. On success, True is returned.
pub async fn answer_shipping_query_post(configuration: &configuration::Configuration, shipping_query_id: &str, ok: bool, shipping_options: Option<Vec<crate::models::ShippingOption>>, error_message: Option<&str>) -> Result<crate::models::InlineResponse2001, Error<AnswerShippingQueryPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/answerShippingQuery", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("shipping_query_id", shipping_query_id.to_string());
    local_var_form_params.insert("ok", ok.to_string());
    if let Some(local_var_param_value) = shipping_options {
        local_var_form_params.insert("shipping_options", local_var_param_value.join(",").to_string());
    }
    if let Some(local_var_param_value) = error_message {
        local_var_form_params.insert("error_message", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AnswerShippingQueryPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns *True* on success. Requires no parameters.
pub async fn close_post(configuration: &configuration::Configuration, ) -> Result<crate::models::InlineResponse2001, Error<ClosePostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/close", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ClosePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to copy messages of any kind. The method is analogous to the method [forwardMessage](https://core.telegram.org/bots/api/#forwardmessage), but the copied message doesn't have a link to the original message. Returns the [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent message on success.
pub async fn copy_message_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, from_chat_id: crate::models::crate::models::AnyOfintegerstring, message_id: i32, caption: Option<&str>, parse_mode: Option<&str>, caption_entities: Option<Vec<crate::models::MessageEntity>>, disable_notification: Option<bool>, reply_to_message_id: Option<i32>, allow_sending_without_reply: Option<bool>, reply_markup: Option<crate::models::crate::models::AnyOfInlineKeyboardMarkupReplyKeyboardMarkupReplyKeyboardRemoveForceReply>) -> Result<crate::models::InlineResponse2005, Error<CopyMessagePostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/copyMessage", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("from_chat_id", from_chat_id.to_string());
    local_var_form_params.insert("message_id", message_id.to_string());
    if let Some(local_var_param_value) = caption {
        local_var_form_params.insert("caption", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = parse_mode {
        local_var_form_params.insert("parse_mode", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = caption_entities {
        local_var_form_params.insert("caption_entities", local_var_param_value.join(",").to_string());
    }
    if let Some(local_var_param_value) = disable_notification {
        local_var_form_params.insert("disable_notification", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_to_message_id {
        local_var_form_params.insert("reply_to_message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = allow_sending_without_reply {
        local_var_form_params.insert("allow_sending_without_reply", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_markup {
        local_var_form_params.insert("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CopyMessagePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. The link can be revoked using the method [revokeChatInviteLink](https://core.telegram.org/bots/api/#revokechatinvitelink). Returns the new invite link as [ChatInviteLink](https://core.telegram.org/bots/api/#chatinvitelink) object.
pub async fn create_chat_invite_link_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, expire_date: Option<i32>, member_limit: Option<i32>) -> Result<crate::models::InlineResponse20011, Error<CreateChatInviteLinkPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/createChatInviteLink", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    if let Some(local_var_param_value) = expire_date {
        local_var_form_params.insert("expire_date", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = member_limit {
        local_var_form_params.insert("member_limit", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateChatInviteLinkPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. You **must** use exactly one of the fields *png\\_sticker* or *tgs\\_sticker*. Returns *True* on success.
pub async fn create_new_sticker_set_post(configuration: &configuration::Configuration, user_id: i32, name: &str, title: &str, emojis: &str, png_sticker: Option<crate::models::crate::models::AnyOfAnyTypestring>, tgs_sticker: Option<crate::models::serde_json::Value>, contains_masks: Option<bool>, mask_position: Option<crate::models::crate::models::MaskPosition>) -> Result<crate::models::InlineResponse2001, Error<CreateNewStickerSetPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/createNewStickerSet", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form = reqwest::multipart::Form::new();
    local_var_form = local_var_form.text("user_id", user_id.to_string());
    local_var_form = local_var_form.text("name", name.to_string());
    local_var_form = local_var_form.text("title", title.to_string());
    if let Some(local_var_param_value) = png_sticker {
        local_var_form = local_var_form.text("png_sticker", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = tgs_sticker {
        local_var_form = local_var_form.text("tgs_sticker", local_var_param_value.to_string());
    }
    local_var_form = local_var_form.text("emojis", emojis.to_string());
    if let Some(local_var_param_value) = contains_masks {
        local_var_form = local_var_form.text("contains_masks", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = mask_position {
        local_var_form = local_var_form.text("mask_position", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateNewStickerSetPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
pub async fn delete_chat_photo_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring) -> Result<crate::models::InlineResponse2001, Error<DeleteChatPhotoPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/deleteChatPhoto", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteChatPhotoPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\\_set\\_sticker\\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
pub async fn delete_chat_sticker_set_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring) -> Result<crate::models::InlineResponse2001, Error<DeleteChatStickerSetPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/deleteChatStickerSet", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteChatStickerSetPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to delete a message, including service messages, with the following limitations:   \\- A message can only be deleted if it was sent less than 48 hours ago.   \\- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.   \\- Bots can delete outgoing messages in private chats, groups, and supergroups.   \\- Bots can delete incoming messages in private chats.   \\- Bots granted *can\\_post\\_messages* permissions can delete outgoing messages in channels.   \\- If the bot is an administrator of a group, it can delete any message there.   \\- If the bot has *can\\_delete\\_messages* permission in a supergroup or a channel, it can delete any message there.   Returns *True* on success.
pub async fn delete_message_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, message_id: i32) -> Result<crate::models::InlineResponse2001, Error<DeleteMessagePostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/deleteMessage", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("message_id", message_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteMessagePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to delete a sticker from a set created by the bot. Returns *True* on success.
pub async fn delete_sticker_from_set_post(configuration: &configuration::Configuration, sticker: &str) -> Result<crate::models::InlineResponse2001, Error<DeleteStickerFromSetPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/deleteStickerFromSet", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("sticker", sticker.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteStickerFromSetPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to remove webhook integration if you decide to switch back to [getUpdates](https://core.telegram.org/bots/api/#getupdates). Returns *True* on success.
pub async fn delete_webhook_post(configuration: &configuration::Configuration, drop_pending_updates: Option<bool>) -> Result<crate::models::InlineResponse2001, Error<DeleteWebhookPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/deleteWebhook", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = drop_pending_updates {
        local_var_form_params.insert("drop_pending_updates", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteWebhookPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the edited invite link as a [ChatInviteLink](https://core.telegram.org/bots/api/#chatinvitelink) object.
pub async fn edit_chat_invite_link_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, invite_link: &str, expire_date: Option<i32>, member_limit: Option<i32>) -> Result<crate::models::InlineResponse20011, Error<EditChatInviteLinkPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/editChatInviteLink", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("invite_link", invite_link.to_string());
    if let Some(local_var_param_value) = expire_date {
        local_var_form_params.insert("expire_date", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = member_limit {
        local_var_form_params.insert("member_limit", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EditChatInviteLinkPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
pub async fn edit_message_caption_post(configuration: &configuration::Configuration, chat_id: Option<crate::models::crate::models::AnyOfintegerstring>, message_id: Option<i32>, inline_message_id: Option<&str>, caption: Option<&str>, parse_mode: Option<&str>, caption_entities: Option<Vec<crate::models::MessageEntity>>, reply_markup: Option<crate::models::crate::models::InlineKeyboardMarkup>) -> Result<crate::models::InlineResponse2007, Error<EditMessageCaptionPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/editMessageCaption", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = chat_id {
        local_var_form_params.insert("chat_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = message_id {
        local_var_form_params.insert("message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = inline_message_id {
        local_var_form_params.insert("inline_message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = caption {
        local_var_form_params.insert("caption", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = parse_mode {
        local_var_form_params.insert("parse_mode", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = caption_entities {
        local_var_form_params.insert("caption_entities", local_var_param_value.join(",").to_string());
    }
    if let Some(local_var_param_value) = reply_markup {
        local_var_form_params.insert("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EditMessageCaptionPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to edit live location messages. A location can be edited until its *live\\_period* expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api/#stopmessagelivelocation). On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
pub async fn edit_message_live_location_post(configuration: &configuration::Configuration, latitude: f32, longitude: f32, chat_id: Option<crate::models::crate::models::AnyOfintegerstring>, message_id: Option<i32>, inline_message_id: Option<&str>, horizontal_accuracy: Option<f32>, heading: Option<i32>, proximity_alert_radius: Option<i32>, reply_markup: Option<crate::models::crate::models::InlineKeyboardMarkup>) -> Result<crate::models::InlineResponse2007, Error<EditMessageLiveLocationPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/editMessageLiveLocation", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = chat_id {
        local_var_form_params.insert("chat_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = message_id {
        local_var_form_params.insert("message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = inline_message_id {
        local_var_form_params.insert("inline_message_id", local_var_param_value.to_string());
    }
    local_var_form_params.insert("latitude", latitude.to_string());
    local_var_form_params.insert("longitude", longitude.to_string());
    if let Some(local_var_param_value) = horizontal_accuracy {
        local_var_form_params.insert("horizontal_accuracy", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = heading {
        local_var_form_params.insert("heading", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = proximity_alert_radius {
        local_var_form_params.insert("proximity_alert_radius", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_markup {
        local_var_form_params.insert("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EditMessageLiveLocationPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded. Use a previously uploaded file via its file\\_id or specify a URL. On success, if the edited message was sent by the bot, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
pub async fn edit_message_media_post(configuration: &configuration::Configuration, media: crate::models::crate::models::InputMedia, chat_id: Option<crate::models::crate::models::AnyOfintegerstring>, message_id: Option<i32>, inline_message_id: Option<&str>, reply_markup: Option<crate::models::crate::models::InlineKeyboardMarkup>) -> Result<crate::models::InlineResponse2007, Error<EditMessageMediaPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/editMessageMedia", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form = reqwest::multipart::Form::new();
    if let Some(local_var_param_value) = chat_id {
        local_var_form = local_var_form.text("chat_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = message_id {
        local_var_form = local_var_form.text("message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = inline_message_id {
        local_var_form = local_var_form.text("inline_message_id", local_var_param_value.to_string());
    }
    local_var_form = local_var_form.text("media", media.to_string());
    if let Some(local_var_param_value) = reply_markup {
        local_var_form = local_var_form.text("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EditMessageMediaPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
pub async fn edit_message_reply_markup_post(configuration: &configuration::Configuration, chat_id: Option<crate::models::crate::models::AnyOfintegerstring>, message_id: Option<i32>, inline_message_id: Option<&str>, reply_markup: Option<crate::models::crate::models::InlineKeyboardMarkup>) -> Result<crate::models::InlineResponse2007, Error<EditMessageReplyMarkupPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/editMessageReplyMarkup", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = chat_id {
        local_var_form_params.insert("chat_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = message_id {
        local_var_form_params.insert("message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = inline_message_id {
        local_var_form_params.insert("inline_message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_markup {
        local_var_form_params.insert("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EditMessageReplyMarkupPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to edit text and [game](https://core.telegram.org/bots/api/#games) messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
pub async fn edit_message_text_post(configuration: &configuration::Configuration, text: &str, chat_id: Option<crate::models::crate::models::AnyOfintegerstring>, message_id: Option<i32>, inline_message_id: Option<&str>, parse_mode: Option<&str>, entities: Option<Vec<crate::models::MessageEntity>>, disable_web_page_preview: Option<bool>, reply_markup: Option<crate::models::crate::models::InlineKeyboardMarkup>) -> Result<crate::models::InlineResponse2007, Error<EditMessageTextPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/editMessageText", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = chat_id {
        local_var_form_params.insert("chat_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = message_id {
        local_var_form_params.insert("message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = inline_message_id {
        local_var_form_params.insert("inline_message_id", local_var_param_value.to_string());
    }
    local_var_form_params.insert("text", text.to_string());
    if let Some(local_var_param_value) = parse_mode {
        local_var_form_params.insert("parse_mode", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = entities {
        local_var_form_params.insert("entities", local_var_param_value.join(",").to_string());
    }
    if let Some(local_var_param_value) = disable_web_page_preview {
        local_var_form_params.insert("disable_web_page_preview", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_markup {
        local_var_form_params.insert("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EditMessageTextPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as *String* on success.
pub async fn export_chat_invite_link_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring) -> Result<crate::models::InlineResponse20010, Error<ExportChatInviteLinkPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/exportChatInviteLink", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExportChatInviteLinkPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to forward messages of any kind. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
pub async fn forward_message_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, from_chat_id: crate::models::crate::models::AnyOfintegerstring, message_id: i32, disable_notification: Option<bool>) -> Result<crate::models::InlineResponse2004, Error<ForwardMessagePostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/forwardMessage", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("from_chat_id", from_chat_id.to_string());
    if let Some(local_var_param_value) = disable_notification {
        local_var_form_params.insert("disable_notification", local_var_param_value.to_string());
    }
    local_var_form_params.insert("message_id", message_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ForwardMessagePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to get a list of administrators in a chat. On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.
pub async fn get_chat_administrators_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring) -> Result<crate::models::InlineResponse20013, Error<GetChatAdministratorsPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/getChatAdministrators", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetChatAdministratorsPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to get information about a member of a chat. Returns a [ChatMember](https://core.telegram.org/bots/api/#chatmember) object on success.
pub async fn get_chat_member_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, user_id: i32) -> Result<crate::models::InlineResponse20015, Error<GetChatMemberPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/getChatMember", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("user_id", user_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetChatMemberPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to get the number of members in a chat. Returns *Int* on success.
pub async fn get_chat_members_count_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring) -> Result<crate::models::InlineResponse20014, Error<GetChatMembersCountPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/getChatMembersCount", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetChatMembersCountPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a [Chat](https://core.telegram.org/bots/api/#chat) object on success.
pub async fn get_chat_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring) -> Result<crate::models::InlineResponse20012, Error<GetChatPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/getChat", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetChatPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a [File](https://core.telegram.org/bots/api/#file) object is returned. The file can then be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`, where `<file_path>` is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile) again.
pub async fn get_file_post(configuration: &configuration::Configuration, file_id: &str) -> Result<crate::models::InlineResponse2009, Error<GetFilePostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/getFile", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("file_id", file_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetFilePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. On success, returns an *Array* of [GameHighScore](https://core.telegram.org/bots/api/#gamehighscore) objects.  This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change.
pub async fn get_game_high_scores_post(configuration: &configuration::Configuration, user_id: i32, chat_id: Option<i32>, message_id: Option<i32>, inline_message_id: Option<&str>) -> Result<crate::models::InlineResponse20019, Error<GetGameHighScoresPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/getGameHighScores", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("user_id", user_id.to_string());
    if let Some(local_var_param_value) = chat_id {
        local_var_form_params.insert("chat_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = message_id {
        local_var_form_params.insert("message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = inline_message_id {
        local_var_form_params.insert("inline_message_id", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetGameHighScoresPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a [User](https://core.telegram.org/bots/api/#user) object.
pub async fn get_me_post(configuration: &configuration::Configuration, ) -> Result<crate::models::InlineResponse2003, Error<GetMePostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/getMe", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetMePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to get the current list of the bot's commands. Requires no parameters. Returns Array of [BotCommand](https://core.telegram.org/bots/api/#botcommand) on success.
pub async fn get_my_commands_post(configuration: &configuration::Configuration, ) -> Result<crate::models::InlineResponse20016, Error<GetMyCommandsPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/getMyCommands", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetMyCommandsPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to get a sticker set. On success, a [StickerSet](https://core.telegram.org/bots/api/#stickerset) object is returned.
pub async fn get_sticker_set_post(configuration: &configuration::Configuration, name: &str) -> Result<crate::models::InlineResponse20018, Error<GetStickerSetPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/getStickerSet", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("name", name.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetStickerSetPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to receive incoming updates using long polling ([wiki](https://en.wikipedia.org/wiki/Push_technology#Long_polling)). An Array of [Update](https://core.telegram.org/bots/api/#update) objects is returned.
pub async fn get_updates_post(configuration: &configuration::Configuration, offset: Option<i32>, limit: Option<i32>, timeout: Option<i32>, allowed_updates: Option<Vec<&str>>) -> Result<crate::models::InlineResponse200, Error<GetUpdatesPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/getUpdates", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = offset {
        local_var_form_params.insert("offset", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = limit {
        local_var_form_params.insert("limit", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = timeout {
        local_var_form_params.insert("timeout", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = allowed_updates {
        local_var_form_params.insert("allowed_updates", local_var_param_value.join(",").to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetUpdatesPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to get a list of profile pictures for a user. Returns a [UserProfilePhotos](https://core.telegram.org/bots/api/#userprofilephotos) object.
pub async fn get_user_profile_photos_post(configuration: &configuration::Configuration, user_id: i32, offset: Option<i32>, limit: Option<i32>) -> Result<crate::models::InlineResponse2008, Error<GetUserProfilePhotosPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/getUserProfilePhotos", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("user_id", user_id.to_string());
    if let Some(local_var_param_value) = offset {
        local_var_form_params.insert("offset", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = limit {
        local_var_form_params.insert("limit", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetUserProfilePhotosPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to get current webhook status. Requires no parameters. On success, returns a [WebhookInfo](https://core.telegram.org/bots/api/#webhookinfo) object. If the bot is using [getUpdates](https://core.telegram.org/bots/api/#getupdates), will return an object with the *url* field empty.
pub async fn get_webhook_info_post(configuration: &configuration::Configuration, ) -> Result<crate::models::InlineResponse2002, Error<GetWebhookInfoPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/getWebhookInfo", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetWebhookInfoPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless [unbanned](https://core.telegram.org/bots/api/#unbanchatmember) first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
pub async fn kick_chat_member_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, user_id: i32, until_date: Option<i32>, revoke_messages: Option<bool>) -> Result<crate::models::InlineResponse2001, Error<KickChatMemberPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/kickChatMember", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("user_id", user_id.to_string());
    if let Some(local_var_param_value) = until_date {
        local_var_form_params.insert("until_date", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = revoke_messages {
        local_var_form_params.insert("revoke_messages", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<KickChatMemberPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method for your bot to leave a group, supergroup or channel. Returns *True* on success.
pub async fn leave_chat_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring) -> Result<crate::models::InlineResponse2001, Error<LeaveChatPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/leaveChat", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<LeaveChatPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to log out from the cloud Bot API server before launching the bot locally. You **must** log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns *True* on success. Requires no parameters.
pub async fn log_out_post(configuration: &configuration::Configuration, ) -> Result<crate::models::InlineResponse2001, Error<LogOutPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/logOut", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<LogOutPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\\_pin\\_messages' admin right in a supergroup or 'can\\_edit\\_messages' admin right in a channel. Returns *True* on success.
pub async fn pin_chat_message_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, message_id: i32, disable_notification: Option<bool>) -> Result<crate::models::InlineResponse2001, Error<PinChatMessagePostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/pinChatMessage", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("message_id", message_id.to_string());
    if let Some(local_var_param_value) = disable_notification {
        local_var_form_params.insert("disable_notification", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PinChatMessagePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass *False* for all boolean parameters to demote a user. Returns *True* on success.
pub async fn promote_chat_member_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, user_id: i32, is_anonymous: Option<bool>, can_manage_chat: Option<bool>, can_post_messages: Option<bool>, can_edit_messages: Option<bool>, can_delete_messages: Option<bool>, can_manage_voice_chats: Option<bool>, can_restrict_members: Option<bool>, can_promote_members: Option<bool>, can_change_info: Option<bool>, can_invite_users: Option<bool>, can_pin_messages: Option<bool>) -> Result<crate::models::InlineResponse2001, Error<PromoteChatMemberPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/promoteChatMember", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("user_id", user_id.to_string());
    if let Some(local_var_param_value) = is_anonymous {
        local_var_form_params.insert("is_anonymous", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = can_manage_chat {
        local_var_form_params.insert("can_manage_chat", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = can_post_messages {
        local_var_form_params.insert("can_post_messages", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = can_edit_messages {
        local_var_form_params.insert("can_edit_messages", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = can_delete_messages {
        local_var_form_params.insert("can_delete_messages", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = can_manage_voice_chats {
        local_var_form_params.insert("can_manage_voice_chats", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = can_restrict_members {
        local_var_form_params.insert("can_restrict_members", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = can_promote_members {
        local_var_form_params.insert("can_promote_members", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = can_change_info {
        local_var_form_params.insert("can_change_info", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = can_invite_users {
        local_var_form_params.insert("can_invite_users", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = can_pin_messages {
        local_var_form_params.insert("can_pin_messages", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PromoteChatMemberPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass *True* for all permissions to lift restrictions from a user. Returns *True* on success.
pub async fn restrict_chat_member_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, user_id: i32, permissions: crate::models::crate::models::ChatPermissions, until_date: Option<i32>) -> Result<crate::models::InlineResponse2001, Error<RestrictChatMemberPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/restrictChatMember", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("user_id", user_id.to_string());
    local_var_form_params.insert("permissions", permissions.to_string());
    if let Some(local_var_param_value) = until_date {
        local_var_form_params.insert("until_date", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RestrictChatMemberPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the revoked invite link as [ChatInviteLink](https://core.telegram.org/bots/api/#chatinvitelink) object.
pub async fn revoke_chat_invite_link_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, invite_link: &str) -> Result<crate::models::InlineResponse20011, Error<RevokeChatInviteLinkPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/revokeChatInviteLink", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("invite_link", invite_link.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RevokeChatInviteLinkPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.
pub async fn send_animation_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, animation: crate::models::crate::models::AnyOfAnyTypestring, duration: Option<i32>, width: Option<i32>, height: Option<i32>, thumb: Option<crate::models::crate::models::AnyOfAnyTypestring>, caption: Option<&str>, parse_mode: Option<&str>, caption_entities: Option<Vec<crate::models::MessageEntity>>, disable_notification: Option<bool>, reply_to_message_id: Option<i32>, allow_sending_without_reply: Option<bool>, reply_markup: Option<crate::models::crate::models::AnyOfInlineKeyboardMarkupReplyKeyboardMarkupReplyKeyboardRemoveForceReply>) -> Result<crate::models::InlineResponse2004, Error<SendAnimationPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/sendAnimation", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form = reqwest::multipart::Form::new();
    local_var_form = local_var_form.text("chat_id", chat_id.to_string());
    local_var_form = local_var_form.text("animation", animation.to_string());
    if let Some(local_var_param_value) = duration {
        local_var_form = local_var_form.text("duration", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = width {
        local_var_form = local_var_form.text("width", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = height {
        local_var_form = local_var_form.text("height", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = thumb {
        local_var_form = local_var_form.text("thumb", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = caption {
        local_var_form = local_var_form.text("caption", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = parse_mode {
        local_var_form = local_var_form.text("parse_mode", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = caption_entities {
        local_var_form = local_var_form.text("caption_entities", local_var_param_value.join(",").to_string());
    }
    if let Some(local_var_param_value) = disable_notification {
        local_var_form = local_var_form.text("disable_notification", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_to_message_id {
        local_var_form = local_var_form.text("reply_to_message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = allow_sending_without_reply {
        local_var_form = local_var_form.text("allow_sending_without_reply", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_markup {
        local_var_form = local_var_form.text("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SendAnimationPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.  For sending voice messages, use the [sendVoice](https://core.telegram.org/bots/api/#sendvoice) method instead.
pub async fn send_audio_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, audio: crate::models::crate::models::AnyOfAnyTypestring, caption: Option<&str>, parse_mode: Option<&str>, caption_entities: Option<Vec<crate::models::MessageEntity>>, duration: Option<i32>, performer: Option<&str>, title: Option<&str>, thumb: Option<crate::models::crate::models::AnyOfAnyTypestring>, disable_notification: Option<bool>, reply_to_message_id: Option<i32>, allow_sending_without_reply: Option<bool>, reply_markup: Option<crate::models::crate::models::AnyOfInlineKeyboardMarkupReplyKeyboardMarkupReplyKeyboardRemoveForceReply>) -> Result<crate::models::InlineResponse2004, Error<SendAudioPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/sendAudio", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form = reqwest::multipart::Form::new();
    local_var_form = local_var_form.text("chat_id", chat_id.to_string());
    local_var_form = local_var_form.text("audio", audio.to_string());
    if let Some(local_var_param_value) = caption {
        local_var_form = local_var_form.text("caption", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = parse_mode {
        local_var_form = local_var_form.text("parse_mode", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = caption_entities {
        local_var_form = local_var_form.text("caption_entities", local_var_param_value.join(",").to_string());
    }
    if let Some(local_var_param_value) = duration {
        local_var_form = local_var_form.text("duration", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = performer {
        local_var_form = local_var_form.text("performer", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = title {
        local_var_form = local_var_form.text("title", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = thumb {
        local_var_form = local_var_form.text("thumb", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = disable_notification {
        local_var_form = local_var_form.text("disable_notification", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_to_message_id {
        local_var_form = local_var_form.text("reply_to_message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = allow_sending_without_reply {
        local_var_form = local_var_form.text("allow_sending_without_reply", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_markup {
        local_var_form = local_var_form.text("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SendAudioPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns *True* on success.  Example: The [ImageBot](https://t.me/imagebot) needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use [sendChatAction](https://core.telegram.org/bots/api/#sendchataction) with *action* = *upload\\_photo*. The user will see a “sending photo” status for the bot.  We only recommend using this method when a response from the bot will take a **noticeable** amount of time to arrive.
pub async fn send_chat_action_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, action: &str) -> Result<crate::models::InlineResponse2001, Error<SendChatActionPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/sendChatAction", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("action", action.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SendChatActionPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to send phone contacts. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
pub async fn send_contact_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, phone_number: &str, first_name: &str, last_name: Option<&str>, vcard: Option<&str>, disable_notification: Option<bool>, reply_to_message_id: Option<i32>, allow_sending_without_reply: Option<bool>, reply_markup: Option<crate::models::crate::models::AnyOfInlineKeyboardMarkupReplyKeyboardMarkupReplyKeyboardRemoveForceReply>) -> Result<crate::models::InlineResponse2004, Error<SendContactPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/sendContact", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("phone_number", phone_number.to_string());
    local_var_form_params.insert("first_name", first_name.to_string());
    if let Some(local_var_param_value) = last_name {
        local_var_form_params.insert("last_name", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = vcard {
        local_var_form_params.insert("vcard", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = disable_notification {
        local_var_form_params.insert("disable_notification", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_to_message_id {
        local_var_form_params.insert("reply_to_message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = allow_sending_without_reply {
        local_var_form_params.insert("allow_sending_without_reply", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_markup {
        local_var_form_params.insert("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SendContactPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to send an animated emoji that will display a random value. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
pub async fn send_dice_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, emoji: Option<&str>, disable_notification: Option<bool>, reply_to_message_id: Option<i32>, allow_sending_without_reply: Option<bool>, reply_markup: Option<crate::models::crate::models::AnyOfInlineKeyboardMarkupReplyKeyboardMarkupReplyKeyboardRemoveForceReply>) -> Result<crate::models::InlineResponse2004, Error<SendDicePostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/sendDice", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    if let Some(local_var_param_value) = emoji {
        local_var_form_params.insert("emoji", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = disable_notification {
        local_var_form_params.insert("disable_notification", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_to_message_id {
        local_var_form_params.insert("reply_to_message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = allow_sending_without_reply {
        local_var_form_params.insert("allow_sending_without_reply", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_markup {
        local_var_form_params.insert("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SendDicePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to send general files. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
pub async fn send_document_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, document: crate::models::crate::models::AnyOfAnyTypestring, thumb: Option<crate::models::crate::models::AnyOfAnyTypestring>, caption: Option<&str>, parse_mode: Option<&str>, caption_entities: Option<Vec<crate::models::MessageEntity>>, disable_content_type_detection: Option<bool>, disable_notification: Option<bool>, reply_to_message_id: Option<i32>, allow_sending_without_reply: Option<bool>, reply_markup: Option<crate::models::crate::models::AnyOfInlineKeyboardMarkupReplyKeyboardMarkupReplyKeyboardRemoveForceReply>) -> Result<crate::models::InlineResponse2004, Error<SendDocumentPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/sendDocument", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form = reqwest::multipart::Form::new();
    local_var_form = local_var_form.text("chat_id", chat_id.to_string());
    local_var_form = local_var_form.text("document", document.to_string());
    if let Some(local_var_param_value) = thumb {
        local_var_form = local_var_form.text("thumb", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = caption {
        local_var_form = local_var_form.text("caption", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = parse_mode {
        local_var_form = local_var_form.text("parse_mode", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = caption_entities {
        local_var_form = local_var_form.text("caption_entities", local_var_param_value.join(",").to_string());
    }
    if let Some(local_var_param_value) = disable_content_type_detection {
        local_var_form = local_var_form.text("disable_content_type_detection", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = disable_notification {
        local_var_form = local_var_form.text("disable_notification", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_to_message_id {
        local_var_form = local_var_form.text("reply_to_message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = allow_sending_without_reply {
        local_var_form = local_var_form.text("allow_sending_without_reply", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_markup {
        local_var_form = local_var_form.text("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SendDocumentPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to send a game. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
pub async fn send_game_post(configuration: &configuration::Configuration, chat_id: i32, game_short_name: &str, disable_notification: Option<bool>, reply_to_message_id: Option<i32>, allow_sending_without_reply: Option<bool>, reply_markup: Option<crate::models::crate::models::InlineKeyboardMarkup>) -> Result<crate::models::InlineResponse2004, Error<SendGamePostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/sendGame", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("game_short_name", game_short_name.to_string());
    if let Some(local_var_param_value) = disable_notification {
        local_var_form_params.insert("disable_notification", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_to_message_id {
        local_var_form_params.insert("reply_to_message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = allow_sending_without_reply {
        local_var_form_params.insert("allow_sending_without_reply", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_markup {
        local_var_form_params.insert("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SendGamePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to send invoices. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
pub async fn send_invoice_post(configuration: &configuration::Configuration, chat_id: i32, title: &str, description: &str, payload: &str, provider_token: &str, start_parameter: &str, currency: &str, prices: Vec<crate::models::LabeledPrice>, provider_data: Option<&str>, photo_url: Option<&str>, photo_size: Option<i32>, photo_width: Option<i32>, photo_height: Option<i32>, need_name: Option<bool>, need_phone_number: Option<bool>, need_email: Option<bool>, need_shipping_address: Option<bool>, send_phone_number_to_provider: Option<bool>, send_email_to_provider: Option<bool>, is_flexible: Option<bool>, disable_notification: Option<bool>, reply_to_message_id: Option<i32>, allow_sending_without_reply: Option<bool>, reply_markup: Option<crate::models::crate::models::InlineKeyboardMarkup>) -> Result<crate::models::InlineResponse2004, Error<SendInvoicePostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/sendInvoice", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("title", title.to_string());
    local_var_form_params.insert("description", description.to_string());
    local_var_form_params.insert("payload", payload.to_string());
    local_var_form_params.insert("provider_token", provider_token.to_string());
    local_var_form_params.insert("start_parameter", start_parameter.to_string());
    local_var_form_params.insert("currency", currency.to_string());
    local_var_form_params.insert("prices", prices.join(",").to_string());
    if let Some(local_var_param_value) = provider_data {
        local_var_form_params.insert("provider_data", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = photo_url {
        local_var_form_params.insert("photo_url", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = photo_size {
        local_var_form_params.insert("photo_size", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = photo_width {
        local_var_form_params.insert("photo_width", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = photo_height {
        local_var_form_params.insert("photo_height", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = need_name {
        local_var_form_params.insert("need_name", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = need_phone_number {
        local_var_form_params.insert("need_phone_number", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = need_email {
        local_var_form_params.insert("need_email", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = need_shipping_address {
        local_var_form_params.insert("need_shipping_address", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = send_phone_number_to_provider {
        local_var_form_params.insert("send_phone_number_to_provider", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = send_email_to_provider {
        local_var_form_params.insert("send_email_to_provider", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = is_flexible {
        local_var_form_params.insert("is_flexible", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = disable_notification {
        local_var_form_params.insert("disable_notification", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_to_message_id {
        local_var_form_params.insert("reply_to_message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = allow_sending_without_reply {
        local_var_form_params.insert("allow_sending_without_reply", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_markup {
        local_var_form_params.insert("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SendInvoicePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to send point on the map. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
pub async fn send_location_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, latitude: f32, longitude: f32, horizontal_accuracy: Option<f32>, live_period: Option<i32>, heading: Option<i32>, proximity_alert_radius: Option<i32>, disable_notification: Option<bool>, reply_to_message_id: Option<i32>, allow_sending_without_reply: Option<bool>, reply_markup: Option<crate::models::crate::models::AnyOfInlineKeyboardMarkupReplyKeyboardMarkupReplyKeyboardRemoveForceReply>) -> Result<crate::models::InlineResponse2004, Error<SendLocationPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/sendLocation", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("latitude", latitude.to_string());
    local_var_form_params.insert("longitude", longitude.to_string());
    if let Some(local_var_param_value) = horizontal_accuracy {
        local_var_form_params.insert("horizontal_accuracy", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = live_period {
        local_var_form_params.insert("live_period", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = heading {
        local_var_form_params.insert("heading", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = proximity_alert_radius {
        local_var_form_params.insert("proximity_alert_radius", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = disable_notification {
        local_var_form_params.insert("disable_notification", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_to_message_id {
        local_var_form_params.insert("reply_to_message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = allow_sending_without_reply {
        local_var_form_params.insert("allow_sending_without_reply", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_markup {
        local_var_form_params.insert("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SendLocationPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of [Messages](https://core.telegram.org/bots/api/#message) that were sent is returned.
pub async fn send_media_group_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, media: Vec<crate::models::AnyOfInputMediaAudioInputMediaDocumentInputMediaPhotoInputMediaVideo>, disable_notification: Option<bool>, reply_to_message_id: Option<i32>, allow_sending_without_reply: Option<bool>) -> Result<crate::models::InlineResponse2006, Error<SendMediaGroupPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/sendMediaGroup", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form = reqwest::multipart::Form::new();
    local_var_form = local_var_form.text("chat_id", chat_id.to_string());
    local_var_form = local_var_form.text("media", media.join(",").to_string());
    if let Some(local_var_param_value) = disable_notification {
        local_var_form = local_var_form.text("disable_notification", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_to_message_id {
        local_var_form = local_var_form.text("reply_to_message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = allow_sending_without_reply {
        local_var_form = local_var_form.text("allow_sending_without_reply", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SendMediaGroupPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to send text messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
pub async fn send_message_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, text: &str, parse_mode: Option<&str>, entities: Option<Vec<crate::models::MessageEntity>>, disable_web_page_preview: Option<bool>, disable_notification: Option<bool>, reply_to_message_id: Option<i32>, allow_sending_without_reply: Option<bool>, reply_markup: Option<crate::models::crate::models::AnyOfInlineKeyboardMarkupReplyKeyboardMarkupReplyKeyboardRemoveForceReply>) -> Result<crate::models::InlineResponse2004, Error<SendMessagePostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/sendMessage", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("text", text.to_string());
    if let Some(local_var_param_value) = parse_mode {
        local_var_form_params.insert("parse_mode", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = entities {
        local_var_form_params.insert("entities", local_var_param_value.join(",").to_string());
    }
    if let Some(local_var_param_value) = disable_web_page_preview {
        local_var_form_params.insert("disable_web_page_preview", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = disable_notification {
        local_var_form_params.insert("disable_notification", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_to_message_id {
        local_var_form_params.insert("reply_to_message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = allow_sending_without_reply {
        local_var_form_params.insert("allow_sending_without_reply", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_markup {
        local_var_form_params.insert("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SendMessagePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to send photos. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
pub async fn send_photo_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, photo: crate::models::crate::models::AnyOfAnyTypestring, caption: Option<&str>, parse_mode: Option<&str>, caption_entities: Option<Vec<crate::models::MessageEntity>>, disable_notification: Option<bool>, reply_to_message_id: Option<i32>, allow_sending_without_reply: Option<bool>, reply_markup: Option<crate::models::crate::models::AnyOfInlineKeyboardMarkupReplyKeyboardMarkupReplyKeyboardRemoveForceReply>) -> Result<crate::models::InlineResponse2004, Error<SendPhotoPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/sendPhoto", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form = reqwest::multipart::Form::new();
    local_var_form = local_var_form.text("chat_id", chat_id.to_string());
    local_var_form = local_var_form.text("photo", photo.to_string());
    if let Some(local_var_param_value) = caption {
        local_var_form = local_var_form.text("caption", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = parse_mode {
        local_var_form = local_var_form.text("parse_mode", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = caption_entities {
        local_var_form = local_var_form.text("caption_entities", local_var_param_value.join(",").to_string());
    }
    if let Some(local_var_param_value) = disable_notification {
        local_var_form = local_var_form.text("disable_notification", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_to_message_id {
        local_var_form = local_var_form.text("reply_to_message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = allow_sending_without_reply {
        local_var_form = local_var_form.text("allow_sending_without_reply", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_markup {
        local_var_form = local_var_form.text("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SendPhotoPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to send a native poll. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
pub async fn send_poll_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, question: &str, options: Vec<&str>, is_anonymous: Option<bool>, _type: Option<&str>, allows_multiple_answers: Option<bool>, correct_option_id: Option<i32>, explanation: Option<&str>, explanation_parse_mode: Option<&str>, explanation_entities: Option<Vec<crate::models::MessageEntity>>, open_period: Option<i32>, close_date: Option<i32>, is_closed: Option<bool>, disable_notification: Option<bool>, reply_to_message_id: Option<i32>, allow_sending_without_reply: Option<bool>, reply_markup: Option<crate::models::crate::models::AnyOfInlineKeyboardMarkupReplyKeyboardMarkupReplyKeyboardRemoveForceReply>) -> Result<crate::models::InlineResponse2004, Error<SendPollPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/sendPoll", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("question", question.to_string());
    local_var_form_params.insert("options", options.join(",").to_string());
    if let Some(local_var_param_value) = is_anonymous {
        local_var_form_params.insert("is_anonymous", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = _type {
        local_var_form_params.insert("type", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = allows_multiple_answers {
        local_var_form_params.insert("allows_multiple_answers", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = correct_option_id {
        local_var_form_params.insert("correct_option_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = explanation {
        local_var_form_params.insert("explanation", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = explanation_parse_mode {
        local_var_form_params.insert("explanation_parse_mode", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = explanation_entities {
        local_var_form_params.insert("explanation_entities", local_var_param_value.join(",").to_string());
    }
    if let Some(local_var_param_value) = open_period {
        local_var_form_params.insert("open_period", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = close_date {
        local_var_form_params.insert("close_date", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = is_closed {
        local_var_form_params.insert("is_closed", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = disable_notification {
        local_var_form_params.insert("disable_notification", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_to_message_id {
        local_var_form_params.insert("reply_to_message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = allow_sending_without_reply {
        local_var_form_params.insert("allow_sending_without_reply", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_markup {
        local_var_form_params.insert("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SendPollPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to send static .WEBP or [animated](https://telegram.org/blog/animated-stickers) .TGS stickers. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
pub async fn send_sticker_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, sticker: crate::models::crate::models::AnyOfAnyTypestring, disable_notification: Option<bool>, reply_to_message_id: Option<i32>, allow_sending_without_reply: Option<bool>, reply_markup: Option<crate::models::crate::models::AnyOfInlineKeyboardMarkupReplyKeyboardMarkupReplyKeyboardRemoveForceReply>) -> Result<crate::models::InlineResponse2004, Error<SendStickerPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/sendSticker", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form = reqwest::multipart::Form::new();
    local_var_form = local_var_form.text("chat_id", chat_id.to_string());
    local_var_form = local_var_form.text("sticker", sticker.to_string());
    if let Some(local_var_param_value) = disable_notification {
        local_var_form = local_var_form.text("disable_notification", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_to_message_id {
        local_var_form = local_var_form.text("reply_to_message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = allow_sending_without_reply {
        local_var_form = local_var_form.text("allow_sending_without_reply", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_markup {
        local_var_form = local_var_form.text("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SendStickerPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to send information about a venue. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
pub async fn send_venue_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, latitude: f32, longitude: f32, title: &str, address: &str, foursquare_id: Option<&str>, foursquare_type: Option<&str>, google_place_id: Option<&str>, google_place_type: Option<&str>, disable_notification: Option<bool>, reply_to_message_id: Option<i32>, allow_sending_without_reply: Option<bool>, reply_markup: Option<crate::models::crate::models::AnyOfInlineKeyboardMarkupReplyKeyboardMarkupReplyKeyboardRemoveForceReply>) -> Result<crate::models::InlineResponse2004, Error<SendVenuePostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/sendVenue", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("latitude", latitude.to_string());
    local_var_form_params.insert("longitude", longitude.to_string());
    local_var_form_params.insert("title", title.to_string());
    local_var_form_params.insert("address", address.to_string());
    if let Some(local_var_param_value) = foursquare_id {
        local_var_form_params.insert("foursquare_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = foursquare_type {
        local_var_form_params.insert("foursquare_type", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = google_place_id {
        local_var_form_params.insert("google_place_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = google_place_type {
        local_var_form_params.insert("google_place_type", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = disable_notification {
        local_var_form_params.insert("disable_notification", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_to_message_id {
        local_var_form_params.insert("reply_to_message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = allow_sending_without_reply {
        local_var_form_params.insert("allow_sending_without_reply", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_markup {
        local_var_form_params.insert("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SendVenuePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// As of [v.4.0](https://telegram.org/blog/video-messages-and-telescope), Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
pub async fn send_video_note_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, video_note: crate::models::crate::models::AnyOfAnyTypestring, duration: Option<i32>, length: Option<i32>, thumb: Option<crate::models::crate::models::AnyOfAnyTypestring>, disable_notification: Option<bool>, reply_to_message_id: Option<i32>, allow_sending_without_reply: Option<bool>, reply_markup: Option<crate::models::crate::models::AnyOfInlineKeyboardMarkupReplyKeyboardMarkupReplyKeyboardRemoveForceReply>) -> Result<crate::models::InlineResponse2004, Error<SendVideoNotePostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/sendVideoNote", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form = reqwest::multipart::Form::new();
    local_var_form = local_var_form.text("chat_id", chat_id.to_string());
    local_var_form = local_var_form.text("video_note", video_note.to_string());
    if let Some(local_var_param_value) = duration {
        local_var_form = local_var_form.text("duration", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = length {
        local_var_form = local_var_form.text("length", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = thumb {
        local_var_form = local_var_form.text("thumb", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = disable_notification {
        local_var_form = local_var_form.text("disable_notification", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_to_message_id {
        local_var_form = local_var_form.text("reply_to_message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = allow_sending_without_reply {
        local_var_form = local_var_form.text("allow_sending_without_reply", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_markup {
        local_var_form = local_var_form.text("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SendVideoNotePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
pub async fn send_video_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, video: crate::models::crate::models::AnyOfAnyTypestring, duration: Option<i32>, width: Option<i32>, height: Option<i32>, thumb: Option<crate::models::crate::models::AnyOfAnyTypestring>, caption: Option<&str>, parse_mode: Option<&str>, caption_entities: Option<Vec<crate::models::MessageEntity>>, supports_streaming: Option<bool>, disable_notification: Option<bool>, reply_to_message_id: Option<i32>, allow_sending_without_reply: Option<bool>, reply_markup: Option<crate::models::crate::models::AnyOfInlineKeyboardMarkupReplyKeyboardMarkupReplyKeyboardRemoveForceReply>) -> Result<crate::models::InlineResponse2004, Error<SendVideoPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/sendVideo", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form = reqwest::multipart::Form::new();
    local_var_form = local_var_form.text("chat_id", chat_id.to_string());
    local_var_form = local_var_form.text("video", video.to_string());
    if let Some(local_var_param_value) = duration {
        local_var_form = local_var_form.text("duration", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = width {
        local_var_form = local_var_form.text("width", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = height {
        local_var_form = local_var_form.text("height", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = thumb {
        local_var_form = local_var_form.text("thumb", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = caption {
        local_var_form = local_var_form.text("caption", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = parse_mode {
        local_var_form = local_var_form.text("parse_mode", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = caption_entities {
        local_var_form = local_var_form.text("caption_entities", local_var_param_value.join(",").to_string());
    }
    if let Some(local_var_param_value) = supports_streaming {
        local_var_form = local_var_form.text("supports_streaming", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = disable_notification {
        local_var_form = local_var_form.text("disable_notification", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_to_message_id {
        local_var_form = local_var_form.text("reply_to_message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = allow_sending_without_reply {
        local_var_form = local_var_form.text("allow_sending_without_reply", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_markup {
        local_var_form = local_var_form.text("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SendVideoPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as [Audio](https://core.telegram.org/bots/api/#audio) or [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
pub async fn send_voice_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, voice: crate::models::crate::models::AnyOfAnyTypestring, caption: Option<&str>, parse_mode: Option<&str>, caption_entities: Option<Vec<crate::models::MessageEntity>>, duration: Option<i32>, disable_notification: Option<bool>, reply_to_message_id: Option<i32>, allow_sending_without_reply: Option<bool>, reply_markup: Option<crate::models::crate::models::AnyOfInlineKeyboardMarkupReplyKeyboardMarkupReplyKeyboardRemoveForceReply>) -> Result<crate::models::InlineResponse2004, Error<SendVoicePostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/sendVoice", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form = reqwest::multipart::Form::new();
    local_var_form = local_var_form.text("chat_id", chat_id.to_string());
    local_var_form = local_var_form.text("voice", voice.to_string());
    if let Some(local_var_param_value) = caption {
        local_var_form = local_var_form.text("caption", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = parse_mode {
        local_var_form = local_var_form.text("parse_mode", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = caption_entities {
        local_var_form = local_var_form.text("caption_entities", local_var_param_value.join(",").to_string());
    }
    if let Some(local_var_param_value) = duration {
        local_var_form = local_var_form.text("duration", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = disable_notification {
        local_var_form = local_var_form.text("disable_notification", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_to_message_id {
        local_var_form = local_var_form.text("reply_to_message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = allow_sending_without_reply {
        local_var_form = local_var_form.text("allow_sending_without_reply", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_markup {
        local_var_form = local_var_form.text("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SendVoicePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns *True* on success.
pub async fn set_chat_administrator_custom_title_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, user_id: i32, custom_title: &str) -> Result<crate::models::InlineResponse2001, Error<SetChatAdministratorCustomTitlePostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/setChatAdministratorCustomTitle", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("user_id", user_id.to_string());
    local_var_form_params.insert("custom_title", custom_title.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetChatAdministratorCustomTitlePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
pub async fn set_chat_description_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, description: Option<&str>) -> Result<crate::models::InlineResponse2001, Error<SetChatDescriptionPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/setChatDescription", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    if let Some(local_var_param_value) = description {
        local_var_form_params.insert("description", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetChatDescriptionPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the *can\\_restrict\\_members* admin rights. Returns *True* on success.
pub async fn set_chat_permissions_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, permissions: crate::models::crate::models::ChatPermissions) -> Result<crate::models::InlineResponse2001, Error<SetChatPermissionsPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/setChatPermissions", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("permissions", permissions.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetChatPermissionsPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
pub async fn set_chat_photo_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, photo: Option<crate::models::serde_json::Value>) -> Result<crate::models::InlineResponse2001, Error<SetChatPhotoPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/setChatPhoto", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form = reqwest::multipart::Form::new();
    local_var_form = local_var_form.text("chat_id", chat_id.to_string());
    match photo {
        Some(local_var_param_value) => { form = form.text("photo", local_var_param_value.to_string()); },
        None => { local_var_form = local_var_form.text("photo", ""); },
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetChatPhotoPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\\_set\\_sticker\\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
pub async fn set_chat_sticker_set_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, sticker_set_name: &str) -> Result<crate::models::InlineResponse2001, Error<SetChatStickerSetPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/setChatStickerSet", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("sticker_set_name", sticker_set_name.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetChatStickerSetPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
pub async fn set_chat_title_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, title: &str) -> Result<crate::models::InlineResponse2001, Error<SetChatTitlePostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/setChatTitle", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("title", title.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetChatTitlePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited [Message](https://core.telegram.org/bots/api/#message), otherwise returns *True*. Returns an error, if the new score is not greater than the user's current score in the chat and *force* is *False*.
pub async fn set_game_score_post(configuration: &configuration::Configuration, user_id: i32, score: i32, force: Option<bool>, disable_edit_message: Option<bool>, chat_id: Option<i32>, message_id: Option<i32>, inline_message_id: Option<&str>) -> Result<crate::models::InlineResponse2007, Error<SetGameScorePostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/setGameScore", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("user_id", user_id.to_string());
    local_var_form_params.insert("score", score.to_string());
    if let Some(local_var_param_value) = force {
        local_var_form_params.insert("force", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = disable_edit_message {
        local_var_form_params.insert("disable_edit_message", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = chat_id {
        local_var_form_params.insert("chat_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = message_id {
        local_var_form_params.insert("message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = inline_message_id {
        local_var_form_params.insert("inline_message_id", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetGameScorePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to change the list of the bot's commands. Returns *True* on success.
pub async fn set_my_commands_post(configuration: &configuration::Configuration, commands: Vec<crate::models::BotCommand>) -> Result<crate::models::InlineResponse2001, Error<SetMyCommandsPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/setMyCommands", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("commands", commands.join(",").to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetMyCommandsPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns *True* on success.  Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.
pub async fn set_passport_data_errors_post(configuration: &configuration::Configuration, user_id: i32, errors: Vec<crate::models::PassportElementError>) -> Result<crate::models::InlineResponse2001, Error<SetPassportDataErrorsPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/setPassportDataErrors", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("user_id", user_id.to_string());
    local_var_form_params.insert("errors", errors.join(",").to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetPassportDataErrorsPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to move a sticker in a set created by the bot to a specific position. Returns *True* on success.
pub async fn set_sticker_position_in_set_post(configuration: &configuration::Configuration, sticker: &str, position: i32) -> Result<crate::models::InlineResponse2001, Error<SetStickerPositionInSetPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/setStickerPositionInSet", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("sticker", sticker.to_string());
    local_var_form_params.insert("position", position.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetStickerPositionInSetPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Returns *True* on success.
pub async fn set_sticker_set_thumb_post(configuration: &configuration::Configuration, name: &str, user_id: i32, thumb: Option<crate::models::crate::models::AnyOfAnyTypestring>) -> Result<crate::models::InlineResponse2001, Error<SetStickerSetThumbPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/setStickerSetThumb", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form = reqwest::multipart::Form::new();
    local_var_form = local_var_form.text("name", name.to_string());
    local_var_form = local_var_form.text("user_id", user_id.to_string());
    if let Some(local_var_param_value) = thumb {
        local_var_form = local_var_form.text("thumb", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetStickerSetThumbPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized [Update](https://core.telegram.org/bots/api/#update). In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns *True* on success.  If you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. `https://www.example.com/<token>`. Since nobody else knows your bot's token, you can be pretty sure it's us.
pub async fn set_webhook_post(configuration: &configuration::Configuration, url: &str, certificate: Option<crate::models::serde_json::Value>, ip_address: Option<&str>, max_connections: Option<i32>, allowed_updates: Option<Vec<&str>>, drop_pending_updates: Option<bool>) -> Result<crate::models::InlineResponse2001, Error<SetWebhookPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/setWebhook", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form = reqwest::multipart::Form::new();
    local_var_form = local_var_form.text("url", url.to_string());
    if let Some(local_var_param_value) = certificate {
        local_var_form = local_var_form.text("certificate", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = ip_address {
        local_var_form = local_var_form.text("ip_address", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = max_connections {
        local_var_form = local_var_form.text("max_connections", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = allowed_updates {
        local_var_form = local_var_form.text("allowed_updates", local_var_param_value.join(",").to_string());
    }
    if let Some(local_var_param_value) = drop_pending_updates {
        local_var_form = local_var_form.text("drop_pending_updates", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetWebhookPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to stop updating a live location message before *live\\_period* expires. On success, if the message was sent by the bot, the sent [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
pub async fn stop_message_live_location_post(configuration: &configuration::Configuration, chat_id: Option<crate::models::crate::models::AnyOfintegerstring>, message_id: Option<i32>, inline_message_id: Option<&str>, reply_markup: Option<crate::models::crate::models::InlineKeyboardMarkup>) -> Result<crate::models::InlineResponse2007, Error<StopMessageLiveLocationPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/stopMessageLiveLocation", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = chat_id {
        local_var_form_params.insert("chat_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = message_id {
        local_var_form_params.insert("message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = inline_message_id {
        local_var_form_params.insert("inline_message_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_markup {
        local_var_form_params.insert("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<StopMessageLiveLocationPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to stop a poll which was sent by the bot. On success, the stopped [Poll](https://core.telegram.org/bots/api/#poll) with the final results is returned.
pub async fn stop_poll_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, message_id: i32, reply_markup: Option<crate::models::crate::models::InlineKeyboardMarkup>) -> Result<crate::models::InlineResponse20017, Error<StopPollPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/stopPoll", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("message_id", message_id.to_string());
    if let Some(local_var_param_value) = reply_markup {
        local_var_form_params.insert("reply_markup", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<StopPollPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to unban a previously kicked user in a supergroup or channel. The user will **not** return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be **removed** from the chat. If you don't want this, use the parameter *only\\_if\\_banned*. Returns *True* on success.
pub async fn unban_chat_member_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, user_id: i32, only_if_banned: Option<bool>) -> Result<crate::models::InlineResponse2001, Error<UnbanChatMemberPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/unbanChatMember", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_form_params.insert("user_id", user_id.to_string());
    if let Some(local_var_param_value) = only_if_banned {
        local_var_form_params.insert("only_if_banned", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UnbanChatMemberPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\\_pin\\_messages' admin right in a supergroup or 'can\\_edit\\_messages' admin right in a channel. Returns *True* on success.
pub async fn unpin_all_chat_messages_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring) -> Result<crate::models::InlineResponse2001, Error<UnpinAllChatMessagesPostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/unpinAllChatMessages", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UnpinAllChatMessagesPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\\_pin\\_messages' admin right in a supergroup or 'can\\_edit\\_messages' admin right in a channel. Returns *True* on success.
pub async fn unpin_chat_message_post(configuration: &configuration::Configuration, chat_id: crate::models::crate::models::AnyOfintegerstring, message_id: Option<i32>) -> Result<crate::models::InlineResponse2001, Error<UnpinChatMessagePostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/unpinChatMessage", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("chat_id", chat_id.to_string());
    if let Some(local_var_param_value) = message_id {
        local_var_form_params.insert("message_id", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UnpinChatMessagePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this method to upload a .PNG file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple times). Returns the uploaded [File](https://core.telegram.org/bots/api/#file) on success.
pub async fn upload_sticker_file_post(configuration: &configuration::Configuration, user_id: i32, png_sticker: Option<crate::models::serde_json::Value>) -> Result<crate::models::InlineResponse2009, Error<UploadStickerFilePostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/uploadStickerFile", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form = reqwest::multipart::Form::new();
    local_var_form = local_var_form.text("user_id", user_id.to_string());
    match png_sticker {
        Some(local_var_param_value) => { form = form.text("png_sticker", local_var_param_value.to_string()); },
        None => { local_var_form = local_var_form.text("png_sticker", ""); },
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UploadStickerFilePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

